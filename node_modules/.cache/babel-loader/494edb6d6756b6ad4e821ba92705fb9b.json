{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\suraj\\\\Desktop\\\\jarus9350\\\\courses\\\\react_redux\\\\burger-builder\\\\src\\\\components\\\\Burger\\\\Burger.js\";\nimport React from 'react';\nimport classes from './Burger.module.css';\nimport BurgerIngredient from './BurgerIngredients/BurgerIngredients';\n\nconst burger = props => {\n  const transformedIngredients = Object.keys(props.ingredients).map(igKey => {\n    return [...Array(props.ingredients[igKey])].map((_, i) => {\n      return /*#__PURE__*/React.createElement(BurgerIngredient, {\n        key: igKey + i,\n        type: igKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7,\n          columnNumber: 24\n        }\n      });\n    });\n  }); //1st argument is previous value and 2nd argument is current value \n  //The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.\n  // .reduce((arr,el) => {\n  //     return arr.concat(el);\n  // },[]);\n\n  if (transformedIngredients.length === 0) {// transformedIngredients = <p>Please start adding ingredients</p>\n  }\n\n  console.log(transformedIngredients); //The Object.keys() method returns an array of a given object's own enumerable property names, iterated in the same order that a normal loop would.\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Burger,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BurgerIngredient, {\n    type: \"bread-top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }), transformedIngredients, /*#__PURE__*/React.createElement(BurgerIngredient, {\n    type: \"bread-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default burger;","map":{"version":3,"sources":["C:/Users/suraj/Desktop/jarus9350/courses/react_redux/burger-builder/src/components/Burger/Burger.js"],"names":["React","classes","BurgerIngredient","burger","props","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","length","console","log","Burger"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;;AACA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACtB,QAAMC,sBAAsB,GAAGC,MAAM,CAACC,IAAP,CAAaH,KAAK,CAACI,WAAnB,EAAiCC,GAAjC,CAAsCC,KAAK,IAAI;AACtE,WAAO,CAAC,GAAGC,KAAK,CAAEP,KAAK,CAACI,WAAN,CAAkBE,KAAlB,CAAF,CAAT,EAAuCD,GAAvC,CAA4C,CAAEG,CAAF,EAAKC,CAAL,KAAY;AAC3D,0BAAO,oBAAC,gBAAD;AAAkB,QAAA,GAAG,EAAEH,KAAK,GAAGG,CAA/B;AAAkC,QAAA,IAAI,EAAEH,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFM,CAAP;AAGH,GAJ0B,CAA/B,CADsB,CAMlB;AACA;AACA;AACA;AACA;;AACA,MAAIL,sBAAsB,CAACS,MAAvB,KAAkC,CAAtC,EAAwC,CACpC;AACH;;AACLC,EAAAA,OAAO,CAACC,GAAR,CAAYX,sBAAZ,EAdsB,CAetB;;AACA,sBACI;AAAK,IAAA,SAAS,EAAEJ,OAAO,CAACgB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKZ,sBAFL,eAGI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH,CAvBD;;AAyBA,eAAeF,MAAf","sourcesContent":["import React from 'react';\r\nimport classes from './Burger.module.css';\r\nimport BurgerIngredient from './BurgerIngredients/BurgerIngredients'\r\nconst burger = (props) => {\r\n    const transformedIngredients = Object.keys( props.ingredients ).map( igKey => {\r\n            return [...Array( props.ingredients[igKey] )].map( ( _, i ) => {\r\n                return <BurgerIngredient key={igKey + i} type={igKey} />;\r\n            } );\r\n        } )\r\n        //1st argument is previous value and 2nd argument is current value \r\n        //The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.\r\n        // .reduce((arr,el) => {\r\n        //     return arr.concat(el);\r\n        // },[]);\r\n        if (transformedIngredients.length === 0){\r\n            // transformedIngredients = <p>Please start adding ingredients</p>\r\n        }\r\n    console.log(transformedIngredients);\r\n    //The Object.keys() method returns an array of a given object's own enumerable property names, iterated in the same order that a normal loop would.\r\n    return (\r\n        <div className={classes.Burger}>\r\n            <BurgerIngredient type='bread-top' />\r\n            {transformedIngredients}\r\n            <BurgerIngredient type='bread-bottom' />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default burger;"]},"metadata":{},"sourceType":"module"}